
std :: import std;
ztest :: import ztest;

using ztest;

// #run main();

main :: func() -> int {


    tests := { make_test("passing_test_1", *passing_test_1),
               make_test("failing_test_1", *failing_test_1),
               make_test("failing_test_2", *failing_test_2),
               make_test("failing_test_3", *failing_test_3)
    };

    suite : ZT_Test_Suite;
    suite.name = "Suite1";
    suite.tests = tests.data;
    suite.test_count = tests.count;

    run_test_suite(*suite);

    return 0;
}

passing_test_1 :: func() -> ZT_Test_Result
{
    @assert(true);
    return ZT_Test_Result.OK;
}

failing_test_1 :: func() -> ZT_Test_Result
{
    @assert(true);
    return ZT_Test_Result.FAIL;
}

failing_test_2 :: func() -> ZT_Test_Result
{
    @assert(false);
    return ZT_Test_Result.OK;
}

write_to_nullptr :: func() -> void {
    ptr : *int;
    <ptr = 5;
}

failing_test_3 :: func() -> ZT_Test_Result
{

    // Stupid workaround for now, since "entry_func" in interpreter_start cannot have locals.
    write_to_nullptr();

    return ZT_Test_Result.OK;
}

